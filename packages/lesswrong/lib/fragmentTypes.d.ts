//
// GENERATED FILE
// Contains Typescript signatures for fragments, generated by
// server/codegen/generateFragmentTypes.ts.
//
interface UsersDefaultFragment { // fragment on Users
	_id: string,
	username: string,
	createdAt: Date,
	isAdmin: boolean,
	services: any /*{"definitions":[{"blackbox":true}]}*/,
	displayName: string,
	email: string,
	slug: string,
	groups: Array<string>,
}

interface VotesDefaultFragment { // fragment on Votes
	documentId: string,
	collectionName: string,
	userId: string,
	authorId: string,
	voteType: string,
	power: number,
	afPower: number,
	cancelled: boolean,
	isUnvote: boolean,
	votedAt: Date,
}

interface PostsBase { // fragment on Posts
	_id: string,
	title: string,
	url: string,
	slug: string,
	postedAt: Date,
	createdAt: Date,
	modifiedAt: Date,
	sticky: boolean,
	metaSticky: boolean,
	status: number,
	frontpageDate: Date,
	meta: boolean,
	draft: boolean,
	deletedDraft: boolean,
	viewCount: number,
	clickCount: number,
	commentCount: number,
	voteCount: number,
	baseScore: number,
	unlisted: boolean,
	score: number,
	feedId: string,
	feedLink: string,
	lastVisitedAt: Date,
	isRead: boolean,
	lastCommentedAt: Date,
	canonicalCollectionSlug: string,
	curatedDate: Date,
	commentsLocked: boolean,
	question: boolean,
	hiddenRelatedQuestion: boolean,
	userId: string,
	groupId: string,
	location: string,
	googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	startTime: Date,
	endTime: Date,
	localStartTime: Date,
	localEndTime: Date,
	facebookLink: string,
	website: string,
	contactInfo: string,
	isEvent: boolean,
	types: Array<string>,
	reviewedByUserId: string,
	suggestForCuratedUserIds: Array<string>,
	suggestForCuratedUsernames: string,
	reviewForCuratedUserId: string,
	authorIsUnreviewed: boolean,
	af: boolean,
	afDate: Date,
	suggestForAlignmentUserIds: Array<string>,
	reviewForAlignmentUserId: string,
	afBaseScore: number,
	afCommentCount: number,
	afLastCommentedAt: Date,
	afSticky: boolean,
	isFuture: boolean,
	hideAuthor: boolean,
	moderationStyle: string,
	hideCommentKarma: boolean,
	submitToFrontpage: boolean,
	shortform: boolean,
	canonicalSource: string,
	shareWithUsers: Array<string>,
	nominationCount2018: number,
	reviewCount2018: number,
	group: PostsBase_group,
}

interface PostsBase_group { // fragment on Localgroups
	_id: string,
	name: string,
}

interface PostsAuthors { // fragment on Posts
	user: PostsAuthors_user,
	coauthors: UsersMinimumInfo,
}

interface PostsAuthors_user extends UsersMinimumInfo { // fragment on Users
	moderationStyle: string,
	bannedUserIds: Array<string>,
	moderatorAssistance: boolean,
}

interface PostsDetails extends PostsBase, PostsAuthors { // fragment on Posts
	tableOfContents: any,
	commentSortOrder: string,
	collectionTitle: string,
	canonicalPrevPostSlug: string,
	canonicalNextPostSlug: string,
	canonicalCollectionSlug: string,
	canonicalSequenceId: string,
	canonicalBookId: string,
	canonicalSequence: PostsDetails_canonicalSequence,
	canonicalBook: PostsDetails_canonicalBook,
	canonicalCollection: PostsDetails_canonicalCollection,
	showModerationGuidelines: boolean,
	moderationGuidelines: any,
	bannedUserIds: Array<string>,
	hideAuthor: boolean,
	moderationStyle: string,
	voteCount: number,
	currentUserVotes: VoteFragment,
	feed: RSSFeedMinimumInfo,
	sourcePostRelations: any,
	targetPostRelations: any,
}

interface PostsDetails_canonicalSequence { // fragment on Sequences
	title: string,
}

interface PostsDetails_canonicalBook { // fragment on Books
	title: string,
}

interface PostsDetails_canonicalCollection { // fragment on Collections
	title: string,
}

interface PostsRevision extends PostsDetails { // fragment on Posts
	version: string,
	contents: RevisionDisplay,
	revisions: any,
}

interface PostsRevisionEdit extends PostsDetails { // fragment on Posts
	version: string,
	contents: RevisionEdit,
	revisions: any,
}

interface PostsWithNavigationAndRevision extends PostsRevision, PostSequenceNavigation { // fragment on Posts
}

interface PostsWithNavigation extends PostsPage, PostSequenceNavigation { // fragment on Posts
}

interface PostSequenceNavigation { // fragment on Posts
	sequence: any,
	prevPost: any,
	nextPost: any,
}

interface PostsPage extends PostsDetails { // fragment on Posts
	version: string,
	contents: RevisionDisplay,
}

interface PostsEdit extends PostsPage { // fragment on Posts
	moderationGuidelines: RevisionEdit,
	contents: RevisionEdit,
}

interface EditModerationGuidelines { // fragment on Posts
	moderationGuidelines: RevisionEdit,
	moderationStyle: string,
}

interface PostsRevisionsList { // fragment on Posts
	_id: string,
	revisions: any,
}

interface PostsList extends PostsBase, PostsAuthors { // fragment on Posts
	originalPostRelationSourceId: string,
	contents: any,
	moderationGuidelines: RevisionDisplay,
}

interface PostsRecentDiscussion extends PostsList { // fragment on Posts
	recentComments: CommentsList,
}

interface UsersBannedFromPostsModerationLog { // fragment on Posts
	user: UsersMinimumInfo,
	title: string,
	slug: string,
	_id: string,
	bannedUserIds: Array<string>,
}

interface CommentsList { // fragment on Comments
	_id: string,
	postId: string,
	parentCommentId: string,
	topLevelCommentId: string,
	contents: any,
	postedAt: Date,
	repliesBlockedUntil: Date,
	userId: string,
	deleted: boolean,
	deletedPublic: boolean,
	deletedReason: string,
	hideAuthor: boolean,
	user: UsersMinimumInfo,
	currentUserVotes: VoteFragment,
	baseScore: number,
	score: number,
	voteCount: number,
	af: boolean,
	afDate: Date,
	moveToAlignmentUserId: string,
	afBaseScore: number,
	suggestForAlignmentUserIds: Array<string>,
	needsReview: boolean,
	answer: boolean,
	parentAnswerId: string,
	retracted: boolean,
	postVersion: string,
	reviewedByUserId: string,
	shortform: boolean,
	lastSubthreadActivity: Date,
	moderatorHat: boolean,
	nominatedForReview: string,
	reviewingForReview: string,
}

interface CommentPermalink extends CommentsList { // fragment on Comments
	parentComment: CommentsList,
}

interface ShortformComments extends CommentsList { // fragment on Comments
	post: ShortformComments_post,
}

interface ShortformComments_post { // fragment on Posts
	_id: string,
	slug: string,
	title: string,
	draft: boolean,
}

interface CommentWithReplies extends CommentsList { // fragment on Comments
	lastSubthreadActivity: Date,
	latestChildren: CommentsList,
	post: CommentWithReplies_post,
}

interface CommentWithReplies_post { // fragment on Posts
	title: string,
	_id: string,
	slug: string,
	lastVisitedAt: Date,
	draft: boolean,
}

interface CommentEdit extends CommentsList { // fragment on Comments
	contents: RevisionEdit,
}

interface NotificationsDefaultFragment { // fragment on Notifications
	userId: string,
	createdAt: Date,
	documentId: string,
	documentType: string,
	link: string,
	title: string,
	message: string,
	type: string,
	viewed: boolean,
	emailed: boolean,
	waitingForBatch: boolean,
}

interface ConversationsDefaultFragment { // fragment on Conversations
	createdAt: Date,
	title: string,
	participantIds: Array<string>,
	latestActivity: Date,
	af: boolean,
	messageCount: number,
	archivedByIds: Array<string>,
}

interface MessagesDefaultFragment { // fragment on Messages
	userId: string,
	createdAt: Date,
	conversationId: string,
}

interface RSSFeedsDefaultFragment { // fragment on RSSFeeds
	userId: string,
	createdAt: Date,
	ownedByUser: boolean,
	displayFullContent: boolean,
	nickname: string,
	url: string,
	status: string,
	rawFeed: any /*{"definitions":[{}]}*/,
	setCanonicalUrl: boolean,
}

interface ReportsDefaultFragment { // fragment on Reports
	userId: string,
	commentId: string,
	postId: string,
	link: string,
	claimedUserId: string,
	description: string,
	createdAt: Date,
	closedAt: Date,
	markedAsSpam: boolean,
	reportedAsSpam: boolean,
}

interface LWEventsDefaultFragment { // fragment on LWEvents
	createdAt: Date,
	userId: string,
	name: string,
	documentId: string,
	important: boolean,
	properties: any /*{"definitions":[{"blackbox":true}]}*/,
	intercom: boolean,
}

interface lwEventsAdminPageFragment { // fragment on LWEvents
	_id: string,
	createdAt: Date,
	userId: string,
	user: UsersMinimumInfo,
	name: string,
	documentId: string,
	important: boolean,
	properties: any /*{"definitions":[{"blackbox":true}]}*/,
	intercom: boolean,
}

interface emailHistoryFragment { // fragment on LWEvents
	_id: string,
	userId: string,
	name: string,
	properties: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface BansDefaultFragment { // fragment on Bans
	createdAt: Date,
	expirationDate: Date,
	userId: string,
	ip: string,
	reason: string,
	comment: string,
	properties: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface BansAdminPageFragment { // fragment on Bans
	_id: string,
	createdAt: Date,
	expirationDate: Date,
	userId: string,
	user: UsersMinimumInfo,
	reason: string,
	comment: string,
	ip: string,
	properties: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface SequencesDefaultFragment { // fragment on Sequences
	createdAt: Date,
	userId: string,
	title: string,
	baseScore: number,
	score: number,
	color: string,
	gridImageId: string,
	bannerImageId: string,
	curatedOrder: number,
	draft: boolean,
	isDeleted: boolean,
	canonicalCollectionSlug: string,
	hidden: boolean,
}

interface PostRelationsDefaultFragment { // fragment on PostRelations
	createdAt: Date,
	type: string,
	sourcePostId: string,
	targetPostId: string,
	order: number,
}

interface PostsDefaultFragment { // fragment on Posts
	createdAt: Date,
	postedAt: Date,
	modifiedAt: Date,
	url: string,
	title: string,
	slug: string,
	excerpt: string,
	viewCount: number,
	lastCommentedAt: Date,
	clickCount: number,
	deletedDraft: boolean,
	status: number,
	isFuture: boolean,
	sticky: boolean,
	userIP: string,
	userAgent: string,
	referrer: string,
	author: string,
	userId: string,
	scheduledAt: Date,
	question: boolean,
	authorIsUnreviewed: boolean,
	submitToFrontpage: boolean,
	hiddenRelatedQuestion: boolean,
	originalPostRelationSourceId: string,
	shortform: boolean,
	canonicalSource: string,
	nominationCount2018: number,
	reviewCount2018: number,
}

interface ChaptersDefaultFragment { // fragment on Chapters
	createdAt: Date,
	title: string,
	subtitle: string,
	number: number,
	sequenceId: string,
	postIds: Array<string>,
}

interface BooksDefaultFragment { // fragment on Books
	createdAt: Date,
	postedAt: Date,
	title: string,
	subtitle: string,
	collectionId: string,
	number: number,
	postIds: Array<string>,
	sequenceIds: Array<string>,
}

interface CollectionsDefaultFragment { // fragment on Collections
	createdAt: Date,
	userId: string,
	title: string,
	slug: string,
	gridImageId: string,
	firstPageLink: string,
}

interface ReviewVotesDefaultFragment { // fragment on ReviewVotes
	createdAt: Date,
	userId: string,
	postId: string,
	qualitativeScore: any /*{"definitions":[{"type":"SimpleSchema.Integer"}]}*/,
	quadraticScore: any /*{"definitions":[{"type":"SimpleSchema.Integer"}]}*/,
	comment: string,
}

interface reviewVoteFragment { // fragment on ReviewVotes
	_id: string,
	createdAt: Date,
	userId: string,
	postId: string,
	qualitativeScore: any /*{"definitions":[{"type":"SimpleSchema.Integer"}]}*/,
	quadraticScore: any /*{"definitions":[{"type":"SimpleSchema.Integer"}]}*/,
	comment: string,
}

interface LocalgroupsDefaultFragment { // fragment on Localgroups
	createdAt: Date,
	name: string,
	organizerIds: Array<string>,
	lastActivity: Date,
	types: Array<string>,
	mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	location: string,
	contactInfo: string,
	facebookLink: string,
	website: string,
	inactive: boolean,
}

interface localGroupsBase { // fragment on Localgroups
	_id: string,
	createdAt: Date,
	organizerIds: Array<string>,
	organizers: UsersMinimumInfo,
	lastActivity: Date,
	name: string,
	location: string,
	googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	types: Array<string>,
	contactInfo: string,
	facebookLink: string,
	website: string,
	inactive: boolean,
}

interface localGroupsHomeFragment extends localGroupsBase { // fragment on Localgroups
	contents: RevisionDisplay,
}

interface localGroupsEdit extends localGroupsBase { // fragment on Localgroups
	contents: RevisionEdit,
}

interface UsersAdmin { // fragment on Users
	_id: string,
	username: string,
	createdAt: Date,
	isAdmin: boolean,
	displayName: string,
	email: string,
	slug: string,
	groups: Array<string>,
	services: any /*{"definitions":[{"blackbox":true}]}*/,
	karma: number,
}

interface conversationsListFragment { // fragment on Conversations
	_id: string,
	title: string,
	createdAt: Date,
	latestActivity: Date,
	participantIds: Array<string>,
	participants: UsersMinimumInfo,
	archivedByIds: Array<string>,
	messageCount: number,
}

interface newConversationFragment { // fragment on Conversations
	_id: string,
	title: string,
	participantIds: Array<string>,
}

interface messageListFragment { // fragment on Messages
	_id: string,
	user: UsersMinimumInfo,
	contents: any,
	createdAt: Date,
	conversationId: string,
}

interface editTitle { // fragment on Conversations
	_id: string,
	title: string,
}

interface NotificationsList { // fragment on Notifications
	_id: string,
	documentId: string,
	documentType: string,
	userId: string,
	createdAt: Date,
	link: string,
	message: string,
	type: string,
	viewed: boolean,
}

interface UsersCurrent extends UsersMinimumInfo { // fragment on Users
	_id: string,
	username: string,
	createdAt: Date,
	isAdmin: boolean,
	displayName: string,
	email: string,
	slug: string,
	groups: Array<string>,
	services: any /*{"definitions":[{"blackbox":true}]}*/,
	pageUrl: string,
	voteBanned: boolean,
	banned: Date,
	isReviewed: boolean,
	nullifyVotes: boolean,
	hideIntercom: boolean,
	hideNavigationSidebar: boolean,
	currentFrontpageFilter: string,
	allPostsTimeframe: string,
	allPostsSorting: string,
	allPostsFilter: string,
	allPostsShowLowKarma: boolean,
	allPostsOpenSettings: boolean,
	lastNotificationsCheck: Date,
	groups: Array<string>,
	bannedUserIds: Array<string>,
	moderationStyle: string,
	moderationGuidelines: RevisionEdit,
	showHideKarmaOption: boolean,
	markDownPostEditor: boolean,
	commentSorting: string,
	location: string,
	googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mapLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mapLocationSet: boolean,
	mapMarkerText: string,
	htmlMapMarkerText: string,
	nearbyEventsNotifications: boolean,
	nearbyEventsNotificationsLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	nearbyEventsNotificationsRadius: number,
	nearbyPeopleNotificationThreshold: number,
	hideFrontpageMap: boolean,
	emailSubscribedToCurated: boolean,
	unsubscribeFromAll: boolean,
	emails: Array<any /*{"definitions":[{}]}*/>,
	whenConfirmationEmailSent: Date,
	noCollapseCommentsFrontpage: boolean,
	noCollapseCommentsPosts: boolean,
	noSingleLineComments: boolean,
	karmaChangeNotifierSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"updateFrequency":{"optional":true,"type":{"definitions":[{"allowedValues":["disabled","daily","weekly","realtime"]}]},"label":"Update frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{"type":"SimpleSchema.Integer","min":0,"max":23}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{"allowedValues":["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]}]},"label":"Day of week gmt"},"showNegativeKarma":{"optional":true,"type":{"definitions":[{}]},"label":"Show negative karma"}},"_depsLabels":{},"_schemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	karmaChangeLastOpened: Date,
	shortformFeedId: string,
	viewUnreviewedComments: boolean,
	sunshineShowNewUserContent: boolean,
	recommendationSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"frontpage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Frontpage"},"recommendationspage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Recommendationspage"},"afterpost":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Afterpost"}},"_depsLabels":{},"_schemaKeys":["frontpage","recommendationspage","afterpost"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["frontpage","recommendationspage","afterpost"],"_objectKeys":{"frontpage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"recommendationspage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"afterpost.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"]},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2},"blackbox":true}]}*/,
	auto_subscribe_to_my_posts: boolean,
	auto_subscribe_to_my_comments: boolean,
	autoSubscribeAsOrganizer: boolean,
	bookmarkedPostsMetadata: Array<any /*{"definitions":[{}]}*/>,
	noExpandUnreadCommentsReview: boolean,
	reviewVotesQuadratic: boolean,
}

interface UserBookmarks { // fragment on Users
	_id: string,
	bookmarkedPostsMetadata: Array<any /*{"definitions":[{}]}*/>,
	bookmarkedPosts: PostsList,
}

interface UserKarmaChanges { // fragment on Users
	_id: string,
	karmaChanges: any,
}

interface RSSFeedMinimumInfo { // fragment on RSSFeeds
	_id: string,
	userId: string,
	user: UsersMinimumInfo,
	createdAt: Date,
	ownedByUser: boolean,
	displayFullContent: boolean,
	nickname: string,
	url: string,
}

interface CommentStats { // fragment on Comments
	currentUserVotes: VoteFragment,
	baseScore: number,
	score: number,
}

interface DeletedCommentsMetaData { // fragment on Comments
	_id: string,
	deleted: boolean,
	deletedDate: Date,
	deletedByUser: DeletedCommentsMetaData_deletedByUser,
	deletedReason: string,
	deletedPublic: boolean,
}

interface DeletedCommentsMetaData_deletedByUser { // fragment on Users
	_id: string,
	displayName: string,
}

interface DeletedCommentsModerationLog extends DeletedCommentsMetaData { // fragment on Comments
	user: UsersMinimumInfo,
	post: DeletedCommentsModerationLog_post,
}

interface DeletedCommentsModerationLog_post { // fragment on Posts
	title: string,
	slug: string,
	_id: string,
}

interface UsersBannedFromUsersModerationLog { // fragment on Users
	_id: string,
	slug: string,
	displayName: string,
	bannedUserIds: Array<string>,
}

interface SelectCommentsList extends CommentsList { // fragment on Comments
	post: SelectCommentsList_post,
}

interface SelectCommentsList_post { // fragment on Posts
	title: string,
	_id: string,
	slug: string,
}

interface UsersList extends UsersMinimumInfo { // fragment on Users
	karma: number,
}

interface SunshineUsersList extends UsersMinimumInfo { // fragment on Users
	karma: number,
	bio: string,
	htmlBio: string,
	createdAt: Date,
	email: string,
	commentCount: number,
	postCount: number,
	voteCount: number,
	smallUpvoteCount: number,
	bigUpvoteCount: number,
	smallDownvoteCount: number,
	bigDownvoteCount: number,
	banned: Date,
	reviewedByUserId: string,
	signUpReCaptchaRating: number,
}

interface newRSSFeedFragment { // fragment on RSSFeeds
	_id: string,
	userId: string,
	createdAt: Date,
	ownedByUser: boolean,
	displayFullContent: boolean,
	nickname: string,
	url: string,
	status: string,
}

interface RSSFeedMutationFragment { // fragment on RSSFeeds
	_id: string,
	userId: string,
	ownedByUser: boolean,
	displayFullContent: boolean,
	nickname: string,
	url: string,
}

interface newEventFragment { // fragment on LWEvents
	_id: string,
	createdAt: Date,
	userId: string,
	name: string,
	important: boolean,
	properties: any /*{"definitions":[{"blackbox":true}]}*/,
	intercom: boolean,
}

interface lastEventFragment { // fragment on LWEvents
	_id: string,
	createdAt: Date,
	documentId: string,
	userId: string,
	name: string,
	important: boolean,
	properties: any /*{"definitions":[{"blackbox":true}]}*/,
	intercom: boolean,
}

interface commentWithContextFragment { // fragment on Comments
	_id: string,
	parentCommentId: string,
	topLevelCommentId: string,
	contents: RevisionDisplay,
	postedAt: Date,
	userId: string,
	user: UsersMinimumInfo,
	currentUserVotes: VoteFragment,
	baseScore: number,
	score: number,
}

interface commentInlineFragment { // fragment on Comments
	_id: string,
	contents: RevisionDisplay,
	userId: string,
	user: UsersMinimumInfo,
}

interface UsersMinimumInfo { // fragment on Users
	_id: string,
	slug: string,
	oldSlugs: Array<string>,
	createdAt: Date,
	username: string,
	displayName: string,
	fullName: string,
	karma: number,
	afKarma: number,
	deleted: boolean,
	groups: Array<string>,
	htmlBio: string,
	postCount: number,
	commentCount: number,
	sequenceCount: number,
	afPostCount: number,
	afCommentCount: number,
	beta: boolean,
	spamRiskScore: number,
}

interface UsersProfile extends UsersMinimumInfo { // fragment on Users
	createdAt: Date,
	isAdmin: boolean,
	bio: string,
	htmlBio: string,
	website: string,
	groups: Array<string>,
	postCount: number,
	afPostCount: number,
	frontpagePostCount: number,
	commentCount: number,
	sequenceCount: number,
	afCommentCount: number,
	sequenceCount: number,
	afSequenceCount: number,
	afSequenceDraftCount: number,
	sequenceDraftCount: number,
	moderationStyle: string,
	moderationGuidelines: RevisionDisplay,
	bannedUserIds: Array<string>,
	location: string,
	googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mapLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mapLocationSet: boolean,
	mapMarkerText: string,
	htmlMapMarkerText: string,
	mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	shortformFeedId: string,
	viewUnreviewedComments: boolean,
	auto_subscribe_to_my_posts: boolean,
	auto_subscribe_to_my_comments: boolean,
	autoSubscribeAsOrganizer: boolean,
	sunshineShowNewUserContent: boolean,
}

interface UsersMapEntry extends UsersMinimumInfo { // fragment on Users
	createdAt: Date,
	isAdmin: boolean,
	groups: Array<string>,
	location: string,
	googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mapLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	mapLocationSet: boolean,
	mapMarkerText: string,
	htmlMapMarkerText: string,
	mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
}

interface UsersEdit extends UsersProfile { // fragment on Users
	moderationGuidelines: RevisionEdit,
	markDownPostEditor: boolean,
	hideIntercom: boolean,
	commentSorting: string,
	currentFrontpageFilter: string,
	noCollapseCommentsPosts: boolean,
	noCollapseCommentsFrontpage: boolean,
	noSingleLineComments: boolean,
	sunshineShowNewUserContent: boolean,
	email: string,
	whenConfirmationEmailSent: Date,
	emailSubscribedToCurated: boolean,
	unsubscribeFromAll: boolean,
	moderatorAssistance: boolean,
	collapseModerationGuidelines: boolean,
	bannedUserIds: Array<string>,
	bannedPersonalUserIds: Array<string>,
	showHideKarmaOption: boolean,
	voteBanned: boolean,
	nullifyVotes: boolean,
	deleteContent: boolean,
	banned: Date,
	username: string,
	displayName: string,
	fullName: string,
	mongoLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	googleLocation: any /*{"definitions":[{"blackbox":true}]}*/,
	location: string,
	reviewedByUserId: string,
	reviewForAlignmentForumUserId: string,
	groups: Array<string>,
	afApplicationText: string,
	afSubmittedApplication: boolean,
	karmaChangeLastOpened: Date,
	karmaChangeNotifierSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"updateFrequency":{"optional":true,"type":{"definitions":[{"allowedValues":["disabled","daily","weekly","realtime"]}]},"label":"Update frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{"type":"SimpleSchema.Integer","min":0,"max":23}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{"allowedValues":["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]}]},"label":"Day of week gmt"},"showNegativeKarma":{"optional":true,"type":{"definitions":[{}]},"label":"Show negative karma"}},"_depsLabels":{},"_schemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["updateFrequency","timeOfDayGMT","dayOfWeekGMT","showNegativeKarma"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	recommendationSettings: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"frontpage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Frontpage"},"recommendationspage":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Recommendationspage"},"afterpost":{"type":{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"method":{"type":{"definitions":[{}]},"optional":false,"label":"Method"},"count":{"type":{"definitions":[{"type":"SimpleSchema.Integer"}]},"optional":false,"label":"Count"},"scoreOffset":{"type":{"definitions":[{}]},"optional":false,"label":"Score offset"},"scoreExponent":{"type":{"definitions":[{}]},"optional":false,"label":"Score exponent"},"personalBlogpostModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Personal blogpost modifier"},"frontpageModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Frontpage modifier"},"curatedModifier":{"type":{"definitions":[{}]},"optional":false,"label":"Curated modifier"},"onlyUnread":{"type":{"definitions":[{}]},"optional":false,"label":"Only unread"}},"_depsLabels":{},"_schemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]},"optional":false,"label":"Afterpost"}},"_depsLabels":{},"_schemaKeys":["frontpage","recommendationspage","afterpost"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["frontpage","recommendationspage","afterpost"],"_objectKeys":{"frontpage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"recommendationspage.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"],"afterpost.":["method","count","scoreOffset","scoreExponent","personalBlogpostModifier","frontpageModifier","curatedModifier","onlyUnread"]},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2},"blackbox":true}]}*/,
	notificationCommentsOnSubscribedPost: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	notificationRepliesToMyComments: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	notificationRepliesToSubscribedComments: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	notificationSubscribedUserPost: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	notificationPostsInGroups: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	notificationPrivateMessage: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	notificationSharedWithMe: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"channel":{"type":{"definitions":[{"allowedValues":["none","onsite","email","both"]}]},"optional":false,"label":"Channel"},"batchingFrequency":{"type":{"definitions":[{"allowedValues":["realtime","daily","weekly"]}]},"optional":false,"label":"Batching frequency"},"timeOfDayGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Time of day gmt"},"dayOfWeekGMT":{"optional":true,"type":{"definitions":[{}]},"label":"Day of week gmt"}},"_depsLabels":{},"_schemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_autoValues":[],"_blackboxKeys":[],"_firstLevelSchemaKeys":["channel","batchingFrequency","timeOfDayGMT","dayOfWeekGMT"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	hideFrontpageMap: boolean,
}

interface unclaimedReportsList { // fragment on Reports
	_id: string,
	userId: string,
	user: unclaimedReportsList_user,
	commentId: string,
	comment: unclaimedReportsList_comment,
	postId: string,
	post: unclaimedReportsList_post,
	closedAt: Date,
	createdAt: Date,
	claimedUserId: string,
	claimedUser: unclaimedReportsList_claimedUser,
	link: string,
	description: string,
	reportedAsSpam: boolean,
	markedAsSpam: boolean,
}

interface unclaimedReportsList_user { // fragment on Users
	_id: string,
	displayName: string,
	username: string,
	slug: string,
}

interface unclaimedReportsList_comment { // fragment on Comments
	_id: string,
	userId: string,
	user: UsersMinimumInfo,
	baseScore: number,
	contents: RevisionDisplay,
	postedAt: Date,
	deleted: boolean,
	postId: string,
	post: unclaimedReportsList_comment_post,
}

interface unclaimedReportsList_comment_post { // fragment on Posts
	_id: string,
	slug: string,
	title: string,
	isEvent: boolean,
}

interface unclaimedReportsList_post { // fragment on Posts
	_id: string,
	slug: string,
	title: string,
	isEvent: boolean,
	contents: RevisionDisplay,
}

interface unclaimedReportsList_claimedUser { // fragment on Users
	_id: string,
	displayName: string,
	username: string,
	slug: string,
}

interface VoteMinimumInfo { // fragment on Votes
	_id: string,
	voteType: string,
}

interface VoteFragment { // fragment on Votes
	_id: string,
	voteType: string,
	power: number,
}

interface WithVotePost { // fragment on Posts
	__typename: string,
	_id: string,
	currentUserVotes: any,
	baseScore: number,
	score: number,
	afBaseScore: number,
	voteCount: number,
}

interface WithVoteComment { // fragment on Comments
	__typename: string,
	_id: string,
	currentUserVotes: any,
	baseScore: number,
	score: number,
	afBaseScore: number,
	voteCount: number,
}

interface VotedItem { // fragment on Votes
	documentId: string,
	power: number,
	votedAt: Date,
}

interface RevisionDisplay { // fragment on Revisions
	version: string,
	updateType: string,
	editedAt: Date,
	userId: string,
	html: string,
	wordCount: number,
	htmlHighlight: string,
	plaintextDescription: string,
}

interface RevisionEdit { // fragment on Revisions
	version: string,
	updateType: string,
	editedAt: Date,
	userId: string,
	originalContents: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"type":{"type":{"definitions":[{}]},"optional":false,"label":"Type"},"data":{"type":{"definitions":[{},{"blackbox":true}]},"optional":false,"label":"Data"}},"_depsLabels":{},"_schemaKeys":["type","data"],"_autoValues":[],"_blackboxKeys":["data"],"_firstLevelSchemaKeys":["type","data"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	html: string,
	markdown: string,
	draftJS: any /*{"definitions":[{}]}*/,
	ckEditorMarkup: string,
	wordCount: number,
	htmlHighlight: string,
	plaintextDescription: string,
}

interface ChaptersFragment { // fragment on Chapters
	_id: string,
	createdAt: Date,
	title: string,
	subtitle: string,
	contents: RevisionDisplay,
	number: number,
	sequenceId: string,
	postIds: Array<string>,
	posts: PostsList,
}

interface ChaptersEdit extends ChaptersFragment { // fragment on Chapters
	contents: RevisionEdit,
}

interface SequencesPageFragment { // fragment on Sequences
	_id: string,
	createdAt: Date,
	userId: string,
	user: UsersMinimumInfo,
	title: string,
	contents: RevisionDisplay,
	gridImageId: string,
	bannerImageId: string,
	color: string,
	canonicalCollectionSlug: string,
	draft: boolean,
	isDeleted: boolean,
	hidden: boolean,
	curatedOrder: number,
	af: boolean,
}

interface SequencesEdit extends SequencesPageFragment { // fragment on Sequences
	contents: RevisionEdit,
}

interface SequencesNavigationFragment { // fragment on Sequences
	_id: string,
	createdAt: Date,
	title: string,
	color: string,
	canonicalCollectionSlug: string,
	draft: boolean,
	isDeleted: boolean,
	hidden: boolean,
	curatedOrder: number,
	chapters: any,
}

interface BookPageFragment { // fragment on Books
	_id: string,
	createdAt: Date,
	title: string,
	number: number,
	subtitle: string,
	contents: RevisionDisplay,
	sequenceIds: Array<string>,
	sequences: SequencesPageFragment,
	postIds: Array<string>,
	posts: PostsList,
	collectionId: string,
}

interface BookEdit extends BookPageFragment { // fragment on Books
	contents: RevisionEdit,
}

interface CollectionsPageFragment { // fragment on Collections
	_id: string,
	createdAt: Date,
	slug: string,
	user: UsersMinimumInfo,
	title: string,
	contents: RevisionDisplay,
	firstPageLink: string,
	gridImageId: string,
	books: BookPageFragment,
}

interface CollectionsEditFragment extends CollectionsPageFragment { // fragment on Collections
	contents: RevisionEdit,
}

interface SuggestAlignmentPost extends PostsList { // fragment on Posts
	suggestForAlignmentUsers: any,
}

interface SuggestAlignmentUser extends UsersMinimumInfo { // fragment on Users
	afKarma: number,
	afPostCount: number,
	afCommentCount: number,
	reviewForAlignmentForumUserId: string,
	groups: Array<string>,
	afApplicationText: string,
	afSubmittedApplication: boolean,
}

interface TagRelsDefaultFragment { // fragment on TagRels
	tagId: string,
	postId: string,
	deleted: boolean,
	userId: string,
	afBaseScore: number,
}

interface TagRelFragment { // fragment on TagRels
	_id: string,
	baseScore: number,
	afBaseScore: number,
	userId: string,
	tagId: string,
	tag: TagRelFragment_tag,
	postId: string,
	post: PostsList,
	currentUserVotes: VoteFragment,
}

interface TagRelFragment_tag { // fragment on Tags
	_id: string,
	name: string,
	slug: string,
	description: any,
}

interface TagRelMinimumFragment { // fragment on TagRels
	_id: string,
	baseScore: number,
	afBaseScore: number,
	userId: string,
	postId: string,
	tag: TagRelMinimumFragment_tag,
	currentUserVotes: VoteFragment,
}

interface TagRelMinimumFragment_tag { // fragment on Tags
	_id: string,
	name: string,
	slug: string,
	description: any,
}

interface WithVoteTagRel { // fragment on TagRels
	__typename: string,
	_id: string,
	userId: string,
	tagId: string,
	tag: WithVoteTagRel_tag,
	postId: string,
	currentUserVotes: any,
	baseScore: number,
	afBaseScore: number,
	score: number,
	voteCount: number,
}

interface WithVoteTagRel_tag { // fragment on Tags
	_id: string,
	name: string,
	slug: string,
}

interface TagsDefaultFragment { // fragment on Tags
	name: string,
	slug: string,
	postCount: number,
	deleted: boolean,
}

interface TagFragment { // fragment on Tags
	_id: string,
	name: string,
	slug: string,
	postCount: number,
	deleted: boolean,
	description: any,
}

interface TagEditFragment { // fragment on Tags
	_id: string,
	name: string,
	slug: string,
	postCount: number,
	deleted: boolean,
	description: RevisionEdit,
}

interface SubscriptionsDefaultFragment { // fragment on Subscriptions
	createdAt: Date,
	userId: string,
	state: string,
	documentId: string,
	collectionName: string,
	deleted: boolean,
	type: string,
}

interface SubscriptionState { // fragment on Subscriptions
	_id: string,
	userId: string,
	createdAt: Date,
	state: string,
	documentId: string,
	collectionName: string,
	deleted: boolean,
	type: string,
}

interface RevisionsDefaultFragment { // fragment on Revisions
	editedAt: Date,
	updateType: string,
	version: string,
	userId: string,
	originalContents: any /*{"definitions":[{"type":{"_constructorOptions":{"humanizeAutoLabels":true,"requiredByDefault":true},"_validators":[],"_docValidators":[],"_validationContexts":{},"_cleanOptions":{"filter":true,"autoConvert":true,"removeEmptyStrings":true,"trimStrings":true,"getAutoValues":true,"removeNullsFromArrays":false,"extendAutoValueContext":{}},"_schema":{"type":{"type":{"definitions":[{}]},"optional":false,"label":"Type"},"data":{"type":{"definitions":[{},{"blackbox":true}]},"optional":false,"label":"Data"}},"_depsLabels":{},"_schemaKeys":["type","data"],"_autoValues":[],"_blackboxKeys":["data"],"_firstLevelSchemaKeys":["type","data"],"_objectKeys":{},"messageBox":{"language":"en","messageList":{"en":{"required":"{{{label}}} is required","minString":"{{{label}}} must be at least {{min}} characters","maxString":"{{{label}}} cannot exceed {{max}} characters","minNumber":"{{{label}}} must be at least {{min}}","maxNumber":"{{{label}}} cannot exceed {{max}}","minNumberExclusive":"{{{label}}} must be greater than {{min}}","maxNumberExclusive":"{{{label}}} must be less than {{max}}","minDate":"{{{label}}} must be on or after {{min}}","maxDate":"{{{label}}} cannot be after {{max}}","badDate":"{{{label}}} is not a valid date","minCount":"You must specify at least {{minCount}} values","maxCount":"You cannot specify more than {{maxCount}} values","noDecimal":"{{{label}}} must be an integer","notAllowed":"{{{value}}} is not an allowed value","expectedType":"{{{label}}} must be of type {{dataType}}","keyNotInSchema":"{{name}} is not allowed by the schema"}},"interpolate":{},"escape":{}},"version":2}}]}*/,
	html: string,
	markdown: string,
	draftJS: any /*{"definitions":[{}]}*/,
	ckEditorMarkup: string,
	wordCount: number,
	htmlHighlight: string,
	plaintextDescription: string,
	plaintextMainText: string,
}

interface CommentsDefaultFragment { // fragment on Comments
	parentCommentId: string,
	topLevelCommentId: string,
	createdAt: Date,
	postedAt: Date,
	author: string,
	postId: string,
	userId: string,
	isDeleted: boolean,
	userIP: string,
	userAgent: string,
	referrer: string,
	authorIsUnreviewed: boolean,
	answer: boolean,
	parentAnswerId: string,
	chosenAnswer: boolean,
	shortform: boolean,
	nominatedForReview: string,
	reviewingForReview: string,
	lastSubthreadActivity: Date,
	postVersion: string,
	hideKarma: boolean,
}

interface NewRelatedPostRel { // fragment on PostRelations
	_id: string,
	type: string,
	sourcePostId: string,
	targetPostId: string,
}

interface ChildRelatedPostRelList { // fragment on PostRelations
	_id: string,
	type: string,
	sourcePost: PostsBase,
	targetPost: PostsBase,
}

interface SuggestAlignmentComment extends CommentsList { // fragment on Comments
	post: SuggestAlignmentComment_post,
	suggestForAlignmentUserIds: Array<string>,
	suggestForAlignmentUsers: any,
}

interface SuggestAlignmentComment_post { // fragment on Posts
	title: string,
	_id: string,
	slug: string,
}

