import React from 'react';
import { registerComponent, Components } from '../../lib/vulcan-lib';
import { Hits, Configure, Index, InstantSearch, SearchBox, CurrentRefinements } from 'react-instantsearch-dom';
import Typography from '@material-ui/core/Typography';
import { algoliaIndexNames, isAlgoliaEnabled, getSearchClient } from '../../lib/algoliaUtil';
import SearchIcon from '@material-ui/icons/Search';

const styles = theme => ({
  root: {
    width: "100%",
    maxWidth: 1000,
    margin: "auto"
  },
  header: {
    display: "flex",
    justifyContent: "space-between",
    padding: 8,
  },
  columns: {
    display: "flex",
    justifyContent: "space-around",
    flexWrap: "wrap"
  },
  searchList: {
    width: 300,
    [theme.breakpoints.down('xs')]: {
      width: "100%"
    }
  },
  usersList: {
    width: 220,
    [theme.breakpoints.down('xs')]: {
      width: "100%"
    }
  },
  searchIcon: {
    marginLeft: 12
  },
  searchInputArea: {
    display: "flex",
    alignItems: "center",
    margin: "auto",
    marginTop: 24,
    marginBottom: 40,
    marginLeft: 12,
    marginRight: 12,
    height: 48,
    border: "solid 1px rgba(0,0,0,.3)",
    borderRadius: 3,
    "& .ais-SearchBox": {
      display: 'inline-block',
      position: 'relative',
      width: '100%',
      marginLeft: 12,
      height: 46,
      whiteSpace: 'nowrap',
      boxSizing: 'border-box',
      fontSize: 14,
    },
    "& .ais-SearchBox-form": {
      height: '100%'
    },
    "& .ais-SearchBox-submit":{
      display: "none"
    },
    // This is a class generated by React InstantSearch, which we don't have direct control over so
    // are doing a somewhat hacky thing to style it.
    "& .ais-SearchBox-input": {
      height: "100%",
      width: "100%",
      paddingRight: 0,
      verticalAlign: "bottom",
      borderStyle: "none",
      boxShadow: "none",
      backgroundColor: "transparent",
      fontSize: 'inherit',
      "-webkit-appearance": "none",
      cursor: "text",
      borderRadius:5,

      [theme.breakpoints.down('xs')]: {
        backgroundColor: "#eee",
        zIndex: theme.zIndexes.searchBar,
        width:110,
        height:36,
        paddingLeft:10
      },
    },
  }
})

const SearchPage = ({classes}:{
  classes: ClassesType
}) => {

  const { ErrorBoundary, SearchPagination, UsersSearchHit, PostsSearchHit, CommentsSearchHit } = Components

  if(!isAlgoliaEnabled) {
    return <div className={classes.root}>
      Search is disabled (Algolia App ID not configured on server)
    </div>
  }

  return <div className={classes.root}>
    <InstantSearch
      indexName={algoliaIndexNames.Posts}
      searchClient={getSearchClient()}
      onSearchStateChange={this.queryStateControl}
    >
      <div className={classes.searchInputArea}>
        <SearchIcon className={classes.searchIcon}/>
        <SearchBox reset={null} focusShortcuts={[]} autoFocus={true} />
      </div>
      <div className={classes.columns}>
      <Components.ErrorBoundary>
          <div className={classes.searchList}>
            <Index indexName={algoliaIndexNames.Posts}>
              <div className={classes.header}>
                <Typography variant="body1">Posts</Typography>
                <SearchPagination />
              </div>

              <Configure hitsPerPage={10} />
              <Hits hitComponent={(props) => <PostsSearchHit {...props} />} />
            </Index>
          </div>
        </Components.ErrorBoundary>
        <ErrorBoundary>
          <div className={classes.searchList}>
            <Index indexName={algoliaIndexNames.Comments}>
              <div className={classes.header}>
                <Typography variant="body1">Comments</Typography>
                <SearchPagination />
              </div>
              <Configure hitsPerPage={10} />
              <Hits hitComponent={(props) => <CommentsSearchHit {...props} />} />
            </Index>
          </div>
        </ErrorBoundary>
        <ErrorBoundary>
          <div className={classes.usersList}>
            <Index indexName={algoliaIndexNames.Users}>
              <div className={classes.header}>
                <Typography variant="body1">Users</Typography>
                <SearchPagination />
              </div>
              <Configure hitsPerPage={10} />
              <Hits hitComponent={(props) => <UsersSearchHit {...props} />} />
            </Index>
          </div>
        </ErrorBoundary>
      </div>
    </InstantSearch>
  </div>
}

const SearchPageComponent = registerComponent("SearchPage", SearchPage, {styles})

declare global {
  interface ComponentTypes {
    SearchPage: typeof SearchPageComponent
  }
}