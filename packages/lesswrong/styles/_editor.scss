.posts-edit-form, .posts-new-form {
    width:$post-width;
    margin:0 auto;

    @include small {
        width:100%;
    }

    .document-edit .posts-delete-link {
        bottom:6px;
        left:0;
        @include small {
          bottom:56px;
          width:100px;
        }
    }

    .commentEditor {
        margin-bottom:30px;
        border-bottom:solid 1px $light-grey;
    }

    .document-edit .input-draft,
    .document-new .input-draft,
    .document-edit .input-frontpage,
    .document-new .input-frontpage {
        margin:0;
        @include small {
            width:125px;
        }

        .form-group.row {
            margin-bottom:0;
        }

        .checkbox {
            width:150px;
            margin:0 0 6px 0;
            @include small {
                width:150px;
            }
        }
    }
    .document-new .input-frontpage .checkbox {
      margin-bottom: 12px;
    }
    .document-new .input-draft .checkbox {
      margin-bottom: 12px;
    }

    .document-edit .input-draft,
    .document-new .input-draft {
        right:115px;
        width:125px;
        @include small {
          bottom:50px;
          right:0px;
          width:100px;

          .checkbox {
              width:100px;
          }
        }
    }

    .document-edit .input-frontpage,
    .document-new .input-frontpage {
        right:255px;
        width:150px;
        @include small {
          bottom:50px;
          right:150px;
          width:100px;
        }
    }

    .document-edit > div > hr {
    // Ray Sept 2017:
    // This hack is necessary because SmartForm automatically includes an <hr/> tag in the "delete" menu:
    // path: /packages/vulcan-forms/lib/Form.jsx
        display:none;
    }

    .form-submit {
        text-align: right;
    }

    .commentEditor .content-body {
        padding:0 18px;
    }
}

/*

Old editor.scss file TODO: Refactor this properly into the main css

*/

// @import '../../node_modules/ory-editor-core/lib/index.css';
// @import '../../node_modules/ory-editor-ui/lib/index.css';
// @import '../../node_modules/ory-editor-plugins-slate/lib/index.css';
// @import '../../node_modules/ory-editor-plugins-parallax-background/lib/index.css';
// @import '../../node_modules/ory-editor-plugins-spacer/lib/index.css';
// @import '../../node_modules/ory-editor-plugins-image/lib/index.css';
// @import '../../node_modules/ory-editor-plugins-video/lib/index.css';

@import '../../node_modules/draft-js/dist/Draft.css';
@import '../../node_modules/draft-js-inline-toolbar-plugin/lib/plugin.css';
@import '../../node_modules/draft-js-image-plugin/lib/plugin.css';
@import '../../node_modules/draft-js-alignment-plugin/lib/plugin.css';
@import '../../node_modules/draft-js-focus-plugin/lib/plugin.css';
@import '../../node_modules/draft-js-divider-plugin/lib/plugin.css';
@import '../../node_modules/draft-js-katex-plugin/lib/plugin.css';


// Preventing material bootstrap from duplicating decorative elements on the
// input elements
.ory-toolbar-drawer {
  input {
    box-shadow: none !important;
    -webkit-box-shadow: none !important;
  }
}

.ory-dimensions {
  input {
    box-shadow: none !important;
    -webkit-box-shadow: none !important;
  }
}

.ory-prevent-blur {
  input {
    box-shadow: none !important;
    -webkit-box-shadow: none !important;
  }
}

// Changing the location of the ory-toolbar buttons to work well with the
// Intercom button

.ory-controls-mode-toggle-control-group {
  padding: 13px !important;
  bottom: 75px !important;
}

.slate-h3-icon {
  padding:4px 0 1px 0 !important;
}
.ory-cell-inner.ory-cell-leaf {
  @include max-small {
    > div > div > div > div {
      padding-left:0 !important;
      padding-top:0 !important;
      padding-bottom:0 !important;
    }

    button {
      width:20px !important;
      height:20px !important;
      margin:0 3px !important;
    }
  }
  @include max-small {
    > div > div > div > div {
      display:none !important;
    }
  }
}


.editor {
  min-height: 80px;
  border-radius: 2px;
  margin-bottom: 2em;
}

.editor :global(.public-DraftEditor-content) {
  min-height: 140px;
}

// Editor clearfix

figure:after {
  content: "Foo";
  visibility: hidden;
  display: block;
  height: 0px;
  clear: both;
}

.draft-image {
  display: block;
  &.center {
    margin-left: auto;
    margin-right: auto;
  }
  &.right {
    float: right;
  }
}


//Hotfix for inline-Toolbar alignment TODO: Fix this in a more systematic way

.form-component-CommentEditor {
  position: static !important;
}

.comments-new-form {
  position: static !important;
}

.public-DraftStyleDefault-block a {
  @include link-underline(#fff, rgba(0,0,0,0.87), #b4d5f3, rgba(0,0,0,0.3))
}


.image-form-invalid {
  color: #e65757;
}

.image-form {
  height: 34px;
  width: 220px;
  padding: 0 12px;
  font-size: 15px;
  font-family: inherit;
  background-color: transparent;
  border: none;
  color: #444;
}

.content-editor-is-empty:before {
    content: "Write here (we support Markdown!)";
    position: absolute;
    color: rgba(0,0,0,0.2);
}

.form-component-EditorFormComponent {
  padding-top: 16px;
  position: static !important;
}

.public-DraftStyleDefault-block {
  margin-top: 1.4rem;
  margin-bottom: 1.4rem;
  padding-right: 0;
  vertical-align: baseline;
}

// Divider plugin styles

.dividerBlock {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  margin: 32px 0;
  border: none; /* strip default hr styling */
  text-align: center;
}

.dividerBlock::after {
  margin-left: 12px;
  color: rgba(0, 0, 0, 0.26); /* pick a color */
  font-size: 1rem;
  letter-spacing: 12px; /* increase space between dots */
  content: '•••';
}

// Katex Mathplugin

@import url("https://cdnjs.cloudflare.com/ajax/libs/mathquill/0.10.1/mathquill.min.css");
@import url("https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.8.3/katex.min.css");

.keypad-input .mq-editable-field .mq-cursor:not(:only-child),
.keypad-input .mq-editable-field .mq-root-block.mq-hasCursor > .mq-cursor:only-child {
    /* HACK(charlie): Magic numbers to properly size and position the vertical
       cursor, which is visible whenever the cursor is not alone in its parent,
       with the exception that it's also visible when the entire input is
       empty. */
    height: 20px !important;
    vertical-align: middle !important;
    margin-top: -5px !important;
}

.keypad-input .mq-editable-field .mq-cursor {
    border-color: #78c008;

    border-left: 2px solid #78c008 !important;
    border-radius: 1px;

    margin-left: -1px !important;
    margin-right: -1px !important;

    /* Fade the cursor in and out, overriding MathQuill's default behavior. */
    /* NOTE(charlie): The 500ms animation length perfectly matches MathQuill's
       own frequency for toggling the application of the .mq-blink class. If we
       were to change this animation length at all, we'd need to modify
       MathQuill as well to match. */
    visibility: visible !important;
    opacity: 1 !important;
    transition: opacity 500ms ease-out !important;
}

.keypad-input .mq-editable-field .mq-cursor.mq-blink {
    visibility: visible !important;
    opacity: 0 !important;
    transition: opacity 500ms ease-in !important;
}

.keypad-input .mq-editable-field .mq-non-leaf .mq-cursor:only-child {
    border: 2px solid !important;
    padding: 0 4px 0 4px;

    border-color: #78c008 !important; /* bright-green color */
    transition: border-color 500ms ease-out !important;
    opacity: 1 !important;
}

.keypad-input .mq-editable-field .mq-non-leaf .mq-cursor.mq-blink:only-child {
    border-color: #CCC !important; /* grey color */
    transition: border-color 500ms ease-in !important;
    opacity: 1 !important;
}

.keypad-input .mq-empty {
    background: transparent !important;
}

/* also adds empty block styling to elements with .mq-hasCursor but without a cursor element (this happens where the cursor is when the math input loses focus) */
.keypad-input .mq-empty:not(.mq-root-block):after, .keypad-input .mq-hasCursor:empty:not(.mq-root-block):after {
    visibility: visible !important;

    /* hides the 'c' content added by MathQuill to measure the width */
    color: transparent;

    display: inline-block;
    border: 2px solid #ccc;
    border-radius: 1px;
    padding: 0 4px 0 4px;
    margin-left: -1px;
    margin-right: -1px;
}

.keypad-input .mq-selection .mq-empty:not(.mq-root-block):after {
    border-color: #ffffff;
}

.keypad-input .mq-hasCursor:empty:not(.mq-root-block):after {
    /* place a c inside for sizing the cursor (for the case explained above); normally, MathQuill already does this for .mq-cursor */
    content: 'c';
}

.keypad-input .mq-math-mode .mq-selection .mq-non-leaf,
.keypad-input .mq-editable-field .mq-selection .mq-non-leaf {
    background: #78c008 !important;
    color: white !important;
    border-color: white !important;
}

.keypad-input .mq-math-mode .mq-selection .mq-scaled,
.keypad-input .mq-editable-field .mq-selection .mq-scaled {
    background: transparent !important;
    color: white !important;
    border-color: transparent !important;
}

.keypad-input .mq-selection {
    display: inline-block !important;
    background: #78c008 !important;
    color: white !important;
    border-color: white !important;
}

/*The keypad sets its own color styles for KaTeX elements that are rendered in*/
/*its keys, so prevent any external styling.*/
.keypad-container .katex {
    color: inherit !important;
}

/**
 * Styles for managing the popover animations. These were generated by
 * Aphrodite's autoprefixer, but some minor tweaks were applied to get them
 * working on mobile Safari. Ideally, we'd be generating these styles with
 * Aphrodite (along with ReactCSSTransitionGroup's support for custom
 * classnames), but the generated styles have issues on mobile Safari.
 *   See: https://github.com/Khan/aphrodite/issues/68.
 *
 * If the animation durations change, the corresponding values in
 * popover-manager.js must change as well.
 */

.popover-enter {
    opacity: 0 !important;
}

.popover-enter.popover-enter-active {
    opacity: 1 !important;
    transition: opacity 200ms ease-out !important;
    -webkit-transition: opacity 200ms ease-out !important;
    -moz-transition: opacity 200ms ease-out !important;
    -ms-transition: opacity 200ms ease-out !important;
}

/**
* Styles for managing the echo animations. These were generated by Aphrodite's
* autoprefixer, but some minor tweaks were applied to get them working on mobile
* Safari. Ideally, we'd be generating these styles with Aphrodite (along with
* ReactCSSTransitionGroup's support for custom classnames), but the generated
* styles have issues on mobile Safari.
*   See: https://github.com/Khan/aphrodite/issues/68.
*
 * If the animation durations change, the corresponding values in
 * echo-manager.js must change as well.
 */

/* Variant A: Slide and fade. */

.echo-slide-and-fade-enter {
    opacity: 1 !important;
    transform: translate3d(0, 0, 0) !important;
    -webkit-transform: translate3d(0, 0, 0) !important;
    -moz-transform: translate3d(0, 0, 0) !important;
    -ms-transform: translate3d(0, 0, 0) !important;
}

.echo-slide-and-fade-enter.echo-slide-and-fade-enter-active {
    opacity: 0 !important;
    transform: translate3d(0, -33%, 0) !important;
    -webkit-transform: translate3d(0, -33%, 0) !important;
    -moz-transform: translate3d(0, -33%, 0) !important;
    -ms-transform: translate3d(0, -33%, 0) !important;

    /**
     * TODO(charlie): These times are intentionally different, which means that
     * the animation really "ends" after 400ms cubic-bezier(1, 0, 0.9, 1) (since
     * the opacity goes to 0), even though the transform doesn't complete.
     * There's probably a way to achieve the same effect by manipulating the
     * transform's Bezier curve and total displacement.
     */
    transition: -webkit-transform 800ms cubic-bezier(0, 1, 0.25, 1), -moz-transform 800ms cubic-bezier(0, 1, 0.25, 1), -ms-transform 800ms cubic-bezier(0, 1, 0.25, 1), transform 800ms cubic-bezier(0, 1, 0.25, 1), opacity 400ms cubic-bezier(1, 0, 0.9, 1) !important;
    -webkit-transform: translate3d(0, -33%, 0) !important;
    -moz-transform: translate3d(0, -33%, 0) !important;
    -ms-transform: translate3d(0, -33%, 0) !important;
    -webkit-transition: -webkit-transform 800ms cubic-bezier(0, 1, 0.25, 1), transform 800ms cubic-bezier(0, 1, 0.25, 1), opacity 400ms cubic-bezier(1, 0, 0.9, 1) !important;
    -moz-transition: -moz-transform 800ms cubic-bezier(0, 1, 0.25, 1), transform 800ms cubic-bezier(0, 1, 0.25, 1), opacity 400ms cubic-bezier(1, 0, 0.9, 1) !important;
    -ms-transition: -ms-transform 800ms cubic-bezier(0, 1, 0.25, 1), transform 800ms cubic-bezier(0, 1, 0.25, 1), opacity 400ms cubic-bezier(1, 0, 0.9, 1) !important;
}

/* Variant B: Fade, but don't slide. */

.echo-fade-only-enter {
    opacity: 1 !important;
}

.echo-fade-only-enter.echo-fade-only-enter-active {
    opacity: 0 !important;
    transition: opacity 300ms cubic-bezier(0.25, 0, 0.75, 1) !important;
    -webkit-transition: opacity 300ms cubic-bezier(0.25, 0, 0.75, 1) !important;
    -moz-transition: opacity 300ms cubic-bezier(0.25, 0, 0.75, 1) !important;
    -ms-transition: opacity 300ms cubic-bezier(0.25, 0, 0.75, 1) !important;
}

/* Variant C: Fade for a longer duration, but again, don't slide. */

.echo-long-fade-only-enter {
    opacity: 1 !important;
}

.echo-long-fade-only-enter.echo-long-fade-only-enter-active {
    opacity: 0 !important;
    transition: opacity 400ms cubic-bezier(0.75, 0, 0.75, 1) !important;
    -webkit-transition: opacity 400ms cubic-bezier(0.75, 0, 0.75, 1) !important;
    -moz-transition: opacity 400ms cubic-bezier(0.75, 0, 0.75, 1) !important;
    -ms-transition: opacity 400ms cubic-bezier(0.75, 0, 0.75, 1) !important;
}
